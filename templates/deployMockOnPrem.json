{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Small unique string."
      },
      "minLength": 3,
      "maxLength": 6
    },
    "storageAccountType": {
      "type": "string",
      "metadata": {
        "description": "Account type, premium vs standard, and local, global redundancy"
      },
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Premium_LRS"
      ]
    },
    "adminUserName": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring"
    },
    "mocOnpremNetwork": {
      "type": "object",
      "defaultValue": {
        "name": "onprem-vnet",
        "addressPrefix": "192.168.0.0/16",
        "subnetName": "mgmt",
        "subnetPrefix": "192.168.1.128/25"
      }
    },
    "mocOnpremGateway": {
      "type": "object",
      "defaultValue": {
        "name": "onprem-vpn-gateway",
        "subnetName": "GatewaySubnet",
        "subnetPrefix": "192.168.255.224/27",
        "publicIPAddressName": "onprem-vpn-gateway-ip"
      }
    },
    "bastionHost": {
      "type": "object",
      "defaultValue": {
        "name": "AzureBastionHost",
        "subnetName": "AzureBastionSubnet",
        "subnetPrefix": "192.168.254.0/27",
        "publicIPAddressName": "bastion-ip",
        "nsgName": "bastion-nsg"
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Machine 1 Server Name."
      },
      "minLength": 2,
      "maxLength": 4
    },
    "domainName": {
      "type": "string",
      "defaultValue": "akshci.local",
      "metadata": {
        "description": "The FQDN that will be used in the environment"
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "The virtual machine server size."
      },
      "defaultValue": "Standard_D16s_v3",
      "allowedValues": [
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D64s_v3",
        "Standard_D16s_v4",
        "Standard_D32s_v4",
        "Standard_D64s_v4",
        "Standard_D16d_v4",
        "Standard_D32d_v4",
        "Standard_D64d_v4",
        "Standard_D16ds_v4",
        "Standard_D32ds_v4",
        "Standard_D64ds_v4",
        "Standard_E8s_v3",
        "Standard_E16s_v3",
        "Standard_E16-4s_v3",
        "Standard_E16-8s_v3",
        "Standard_E20s_v3",
        "Standard_E32s_v3",
        "Standard_E32-8s_v3",
        "Standard_E32-16s_v3",
        "Standard_E48s_v3",
        "Standard_E64s_v3",
        "Standard_E64-16s_v3",
        "Standard_E64-32s_v3",
        "Standard_E8s_v4",
        "Standard_E16s_v4",
        "Standard_E16-8s_v4",
        "Standard_E20s_v4",
        "Standard_E32s_v4",
        "Standard_E32-8s_v4",
        "Standard_E32-16s_v4",
        "Standard_E48s_v4",
        "Standard_E64s_v4",
        "Standard_E64-16s_v4",
        "Standard_E64-32s_v4",
        "Standard_E8d_v4",
        "Standard_E16d_v4",
        "Standard_E20d_v4",
        "Standard_E32d_v4",
        "Standard_E48d_v4",
        "Standard_E64d_v4",
        "Standard_E8ds_v4",
        "Standard_E16ds_v4",
        "Standard_E20ds_v4",
        "Standard_E32ds_v4",
        "Standard_E48ds_v4",
        "Standard_E64ds_v4",
        "Standard_E64-16ds_v4",
        "Standard_E64-32ds_v4"
      ]
    },
    "dataDiskSize": {
      "type": "string",
      "defaultValue": "128",
      "allowedValues": [
        "32",
        "64",
        "128",
        "256",
        "512",
        "1024"
      ],
      "metadata": {
        "description": "The size of the individual data disks in GiB. 8 of these will be provisioned therefore 32GiB is the recommended default."
      }
    },
    "dataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "StandardSSD_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The Storage type of the VM data disk. If your VM contains an 's' in the VM size, you can select Premium_LRS storage for increased performance, but at a higher cost."
      }
    },
    "customRdpPort": {
      "type": "string",
      "defaultValue": "3389",
      "metadata": {
        "description": "If you wish to use a different port to RDP into the VM (between 0 and 65535), change it here, otherwise, leave the default."
      }
    },
    "configureSitetosite": {
      "type": "bool",
      "defaultValue": false
    },
    "enableDHCP": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Choose whether you wish to enable DHCP in the environment for AKS-HCI testing. If you choose Disabled, it can be enabled after deployment."
      }
    }
  },
  "variables": {
    "cleanPrefix": "[toLower(parameters('prefix'))]",
    "storageAccountName": "[concat(parameters('prefix'), uniqueString(resourceGroup().id), '2')]",
    "storageId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
    "vmName": "[concat(variables('cleanPrefix'), '-dp-', parameters('vmName'), '-vm')]",
    "NicName": "[concat(variables('vmName'),'-nic')]",
    "windowsOSVersion": "2019-datacenter-gensecond",
    "dataDisksCount": 8,
    "environment": "Workgroup",
    "artifactsLocation": "https://raw.githubusercontent.com/danielscholl/azure-hcl-nested/main/",
    "dscUri": "https://github.com/danielscholl/azure-hcl-nested/raw/main/dsc/akshcihost.zip",
    "wadlogs": "<WadCfg> <DiagnosticMonitorConfiguration overallQuotaInMB=\"4096\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration\"> <DiagnosticInfrastructureLogs scheduledTransferLogLevelFilter=\"Error\"/> <WindowsEventLog scheduledTransferPeriod=\"PT1M\" > <DataSource name=\"Application!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"Security!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"System!*[System[(Level = 1 or Level = 2)]]\" /></WindowsEventLog>",
    "wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU utilization\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Privileged Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% User Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Processor Frequency\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"CPU frequency\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Processes\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Thread Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Handle Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Handles\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\% Committed Bytes In Use\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory usage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory committed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Commit Limit\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory commit limit\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Read Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Write Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Transfers/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Reads/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk read operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Writes/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk write operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Read Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Write Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\LogicalDisk(_Total)\\% Free Space\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk free space (percentage)\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "wadcfgxstart": "[concat(variables('wadlogs'), variables('wadperfcounters1'), variables('wadperfcounters2'), '<Metrics resourceId=\"')]",
    "wadmetricsresourceid": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name , '/providers/', 'Microsoft.Compute/virtualMachines/')]",
    "wadcfgxend": "\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>"
  },
  "resources": [
    {
      "comments": "## Storage Account ##",
      "name": "[variables('storageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Storage Account"
      },
      "kind": "Storage",
      "sku": {
        "name": "[parameters('storageAccountType')]",
        "tier": "Standard"
      },
      "properties": {
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": true
            }
          }
        }
      }
    },
    {
      "comments": "## VNet and Diagnostic Configuration ##",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-05-01",
      "name": "[parameters('mocOnpremNetwork').name]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('mocOnpremNetwork').addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('mocOnpremNetwork').subnetName]",
            "properties": {
              "addressPrefix": "[parameters('mocOnpremNetwork').subnetPrefix]"
            }
          },
          {
            "name": "[parameters('mocOnpremGateway').subnetName]",
            "properties": {
              "addressPrefix": "[parameters('mocOnpremGateway').subnetPrefix]"
            }
          },
          {
            "name": "[parameters('bastionHost').subnetName]",
            "properties": {
              "addressPrefix": "[parameters('bastionHost').subnetPrefix]"
            }
          }
        ]
      }
    },
    {
      "comments": "## Public IP address for VPN Gateway ##",
      "condition": "[parameters('configureSitetosite')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2019-11-01",
      "name": "[parameters('mocOnpremGateway').publicIPAddressName]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "comments": "## VPN Gateway ##",
      "condition": "[parameters('configureSitetosite')]",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "apiVersion": "2019-11-01",
      "name": "[parameters('mocOnpremGateway').name]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('mocOnpremNetwork').name)]",
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('mocOnpremGateway').publicIPAddressName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('mocOnpremNetwork').name, parameters('mocOnpremGateway').subnetName)]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('mocOnpremGateway').publicIPAddressName)]"
              }
            },
            "name": "vnetGatewayConfig"
          }
        ],
        "sku": {
          "name": "Basic",
          "tier": "Basic"
        },
        "gatewayType": "Vpn",
        "vpnType": "RouteBased",
        "enableBgp": false
      }
    },
    {
      "comments": "## Public IP address for Bastion ##",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2020-05-01",
      "name": "[parameters('bastionHost').publicIPAddressName]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "comments": "## NSG and rules for Bastion ##",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-11-01",
      "name": "[parameters('bastionHost').nsgName]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "bastion-in-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "Internet",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-control-in-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "GatewayManager",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-in-host",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRanges": [
                "8080",
                "5701"
              ],
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-vnet-out-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRanges": [
                "22",
                "3389"
              ],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          },
          {
            "name": "bastion-azure-out-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "AzureCloud",
              "access": "Allow",
              "priority": 120,
              "direction": "Outbound"
            }
          },
          {
            "name": "bastion-out-host",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRanges": [
                "8080",
                "5701"
              ],
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 130,
              "direction": "Outbound"
            }
          },
          {
            "name": "bastion-out-deny",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 1000,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "comments": "## Azure Bastion and Diagnostic Configuration ##",
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2020-06-01",
      "name": "[parameters('bastionHost').name]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('mocOnpremNetwork').name)]",
        "[resourceId('Microsoft.Network/publicIpAddresses', parameters('bastionHost').publicIPAddressName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IpConf",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('mocOnpremNetwork').name, parameters('bastionHost').subnetName)]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('bastionHost').publicIPAddressName)]"
              }
            }
          }
        ]
      }
    },
    {
      "comments": "## Network Interface for Virtual Machine ##",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[variables('NicName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('mocOnpremNetwork').name)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('mocOnpremNetwork').name, parameters('mocOnpremNetwork').subnetName)]"
              }
            }
          }
        ]
      }
    },
    {
      "comments": "## Virtual Machine ##",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('NicName'))]"
      ],
      "properties": {
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "provisionVmAgent": true
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[variables('WindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          },
          "copy": [
            {
              "name": "dataDisks",
              "count": "[variables('dataDisksCount')]",
              "input": {
                "name": "[concat(parameters('vmName'),'DataDisk',copyIndex('dataDisks'))]",
                "diskSizeGB": "[parameters('dataDiskSize')]",
                "lun": "[copyIndex('dataDisks')]",
                "createOption": "Empty",
                "caching": "None",
                "managedDisk": {
                  "storageAccountType": "[parameters('dataDiskType')]"
                }
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('NicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://', variables('storageAccountName'), '.blob.core.windows.net')]"
          }
        }
      },
      "resources": [
        {
          "name": "Microsoft.Compute.BGInfoExtension",
          "type": "extensions",
          "apiVersion": "2016-04-30-preview",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[variables('vmName')]"
          ],
          "tags": {
            "displayName": "BGInfoExtension"
          },
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "BGInfo",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {},
            "protectedSettings": null
          }
        },
        {
          "type": "extensions",
          "name": "InstallWAC",
          "apiVersion": "2018-06-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[variables('vmName')]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.10",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[uri(variables('artifactsLocation'), concat('scripts/installWac.ps1'))]"
              ]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File installWac.ps1', ' -userName ', parameters('adminUsername'))]"
            }
          }
        },
        {
          "type": "extensions",
          "name": "ConfigureAksHciHost",
          "apiVersion": "2020-06-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[variables('vmName')]",
            "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmName'), 'InstallWAC')]"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.77",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "wmfVersion": "latest",
              "configuration": {
                "url": "[variables('dscUri')]",
                "script": "akshcihost.ps1",
                "function": "AKSHCIHost"
              },
              "configurationArguments": {
                "DomainName": "[parameters('domainName')]",
                "environment": "[variables('environment')]",
                "enableDHCP": "[parameters('enableDHCP')]",
                "customRdpPort": "[parameters('customRdpPort')]"
              }
            },
            "protectedSettings": {
              "configurationArguments": {
                "adminCreds": {
                  "UserName": "[parameters('adminUserName')]",
                  "Password": "[parameters('adminPassword')]"
                }
              }
            }
          }
        },
        {
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "apiVersion": "2016-04-30-preview",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[variables('vmName')]"
          ],
          "tags": {
            "displayName": "AzureDiagnostics"
          },
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), variables('vmName'), variables('wadcfgxend')))]",
              "storageAccount": "[variables('storageAccountName')]"
            },
            "protectedSettings": {
              "storageAccountName": "[variables('storageAccountName')]",
              "storageAccountKey": "[listKeys(variables('storageId'), '2016-01-01').keys[0].value]"
            }
          }
        }
      ]
    },
    {
      "comments": "## Auto Shutdown ##",
      "name": "[concat('shutdown-computevm-', variables('vmName'))]",
      "type": "microsoft.devtestlab/schedules",
      "apiVersion": "2018-09-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "status": "Enabled",
        "taskType": "ComputeVmShutdownTask",
        "dailyRecurrence": {
          "time": "1800"
        },
        "timeZoneId": "Central Standard Time",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 30
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmname'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmname'))]"
      ]
    }
  ],
  "outputs": {
    // "vpnIp": {
    //   "type": "string",
    //   "value": "[reference(resourceId('Microsoft.Network/virtualNetworkGateways', parameters('mocOnpremGateway').name)).bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]]"
    // },
    "mocOnpremNetworkPrefix": {
      "type": "string",
      "value": "[parameters('mocOnpremNetwork').addressPrefix]"
    },
    "mocOnpremGatewayName": {
      "type": "string",
      "value": "[parameters('mocOnpremGateway').name]"
    }
  }
}